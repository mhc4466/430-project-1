/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./client/home.js":
/*!************************!*\
  !*** ./client/home.js ***!
  \************************/
/***/ (() => {

eval("//Sends a head request to see if a poll exists\r\nconst checkForPoll = async (id) => {\r\n    let response = await fetch(`/question?id=${id}`, {\r\n        method: 'head'\r\n    });\r\n    if (response.status < 300) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\r\n\r\n//Callback for both Respond and Results because they have similar enough behavior\r\n//Create has too different behavior to combine\r\n//Manages checking for whether a poll exists before answering or viewing results\r\nconst respondResultsCallback = async (e) => {\r\n    e.preventDefault();\r\n    const form = document.querySelector(\"#promptForm\");\r\n    const action = form.getAttribute('action');\r\n\r\n    const idField = form.querySelector('#idField');\r\n    if (await checkForPoll(idField.value)) {\r\n        window.location.href = `${action}?id=${idField.value}`;\r\n    } else {\r\n        //Looks for warn, creates it if it doesn't exist.\r\n        let warn = document.querySelector(\"#warn\") || document.createElement('h3');\r\n        warn.id = \"warn\";\r\n        warn.innerHTML = \"Couldn't find a poll with that ID\";\r\n        document.querySelector('#prompt').appendChild(warn);\r\n    }\r\n}\r\n\r\n//Callback for Create, forbids entering creator for an existing ID\r\n//(updates are only acceptable shortly after creation)\r\nconst createCallback = async (e) => {\r\n    e.preventDefault();\r\n    const form = document.querySelector(\"#promptForm\");\r\n    const action = form.getAttribute('action');\r\n\r\n    const idField = form.querySelector('#idField');\r\n    if (!await checkForPoll(idField.value)) {\r\n        window.location.href = `${action}?id=${idField.value}`;\r\n    } else {\r\n        //Looks for warn, creates it if it doesn't exist.\r\n        let warn = document.querySelector(\"#warn\") || document.createElement('h3');\r\n        warn.id = \"warn\";\r\n        warn.innerHTML = \"There is already an active poll with that ID\";\r\n        document.querySelector('#prompt').appendChild(warn);\r\n    }\r\n}\r\n\r\n//Handles creating a prompt as a form below the buttons when clicked\r\n//Each form becomes capable of querying the server\r\nconst updatePrompt = async (source) => {\r\n    const prompt = document.querySelector('#prompt');\r\n    \r\n    prompt.innerHTML = \"\";\r\n    let form = document.createElement('form');\r\n\r\n    //For responding to, creating, or viewing results of a poll, prompt user for extra details\r\n    switch (source) {\r\n        case 'respond':\r\n            prompt.innerHTML += \"<h2>Enter Poll ID</h2>\";\r\n            form.id = \"promptForm\";\r\n            form.action = \"/poll\";\r\n            form.method = \"get\";\r\n            form.innerHTML += \r\n                `<div class=\"field\">\r\n                    <div class=\"control\">\r\n                        <input class=\"input\" id=\"idField\" type=\"text\" name=\"id\" value=\"example\"/>\r\n                    </div>\r\n                    <div class=\"control\">\r\n                        <input class=\"button\" type=\"submit\" value=\"Find Poll\" />\r\n                    </div>\r\n                </div>`;\r\n            form.addEventListener('submit', respondResultsCallback);\r\n            form.querySelector(\"#idField\").addEventListener('input', () => {\r\n                if (document.querySelector(\"#warn\")) {\r\n                    document.querySelector(\"#warn\").innerHTML = \"\";\r\n                }\r\n            });\r\n            prompt.appendChild(form);\r\n            break;\r\n        case 'create':\r\n            prompt.innerHTML += \"<h2>Create an ID For Your Poll</h2>\";\r\n            form.id = \"promptForm\";\r\n            form.action = \"/create\";\r\n            form.method = \"get\";\r\n            form.innerHTML += \r\n                `<div class=\"field\">\r\n                    <div class=\"control\">\r\n                        <input class=\"input\" id=\"idField\" type=\"text\" name=\"id\" value=\"example\"/>\r\n                    </div>\r\n                    <div class=\"control\">\r\n                        <input class=\"button\" type=\"submit\" value=\"Begin Creating\" />\r\n                    </div>\r\n                </div>`;\r\n            form.addEventListener('submit', createCallback);\r\n            form.querySelector(\"#idField\").addEventListener('input', () => {\r\n                if (document.querySelector(\"#warn\")) {\r\n                    document.querySelector(\"#warn\").innerHTML = \"\";\r\n                }\r\n            });\r\n            prompt.appendChild(form);\r\n            break;\r\n        case 'results':\r\n            prompt.innerHTML += \"<h2>Enter Poll ID</h2>\";\r\n            form.id = \"promptForm\";\r\n            form.action = \"/results\";\r\n            form.method = \"get\";\r\n            form.innerHTML += \r\n                `<div class=\"field\">\r\n                    <div class=\"control\">\r\n                        <input class=\"input\" id=\"idField\" type=\"text\" name=\"id\" value=\"example\"/>\r\n                    </div>\r\n                    <div class=\"control\">\r\n                        <input class=\"button\" type=\"submit\" value=\"Find Poll Results\" />\r\n                    </div>\r\n                </div>`;\r\n            form.addEventListener('submit', respondResultsCallback);\r\n            form.querySelector(\"#idField\").addEventListener('input', () => {\r\n                if (document.querySelector(\"#warn\")) {\r\n                    document.querySelector(\"#warn\").innerHTML = \"\";\r\n                }\r\n            });\r\n            prompt.appendChild(form);\r\n            break;\r\n        default:\r\n            console.log(\"Unexpected client error\");\r\n            break;\r\n    }\r\n}\r\n\r\nconst init = () => {\r\n    const respondButton = document.querySelector('#respondButton');\r\n    const createButton = document.querySelector('#createButton');\r\n    const resultsButton = document.querySelector('#resultsButton');\r\n\r\n    //Each button pulls down their respective prompt to move on to the next step\r\n    respondButton.addEventListener('click', () => updatePrompt('respond'));\r\n    createButton.addEventListener('click', () => updatePrompt('create'));\r\n    resultsButton.addEventListener('click', () => updatePrompt('results'));\r\n\r\n    //This makes each button darken when selected\r\n    respondButton.addEventListener('click', () => {\r\n        respondButton.classList.add('is-link');\r\n        createButton.classList.remove('is-link');\r\n        resultsButton.classList.remove('is-link');\r\n    });\r\n    createButton.addEventListener('click', () => {\r\n        respondButton.classList.remove('is-link');\r\n        createButton.classList.add('is-link');\r\n        resultsButton.classList.remove('is-link');\r\n    });\r\n    resultsButton.addEventListener('click', () => {\r\n        respondButton.classList.remove('is-link');\r\n        createButton.classList.remove('is-link');\r\n        resultsButton.classList.add('is-link');\r\n    });\r\n};\r\n\r\nwindow.onload = init;\n\n//# sourceURL=webpack://430-project-1/./client/home.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./client/home.js"]();
/******/ 	
/******/ })()
;